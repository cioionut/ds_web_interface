{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NLUResponse","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","activeTab","tab","setState","_this2","entities","react_default","a","createElement","reactstrap_es","tabs","className","classnames","active","onClick","href","tabId","sm","hover","map","entity","idx","key","entity_value","entity_type","parseFloat","confidence_score","toFixed","intent","intent_type","Component","App","_this3","startUtt","toggleNavbar","handleUtteranceChange","handleSubmitFrom","collapsed","nluResponse","end","start","text","elem","utt","target","value","charAt","length","utterance","_this4","preventDefault","url","URL","params","search","URLSearchParams","fetch","method","mode","then","res","status","json","response","catch","error","console","_this5","color","light","expand","isOpen","navbar","right","onSubmit","type","name","id","onChange","placeholder","App_NLUResponse","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3dbd6f57.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './custom.css';\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Container,\n  Row,\n  Col,\n  Table,\n  Form, FormGroup, Input, Button, TabContent, TabPane\n} from 'reactstrap';\nimport classnames from 'classnames';\n\n\nclass NLUResponse extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      activeTab: '1'\n    };\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n\n  render() {\n    let entities = this.props.entities || []\n    return (\n      <div>\n        <p></p>\n        <Nav tabs>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '1' })}\n              onClick={() => { this.toggle('1'); }}\n              href=\"#\"\n            >\n            Entities\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '2' })}\n              onClick={() => { this.toggle('2'); }}\n              href=\"#\"\n            >\n            Intention\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"1\">\n            <Row>\n              <Col sm=\"12\">\n                <Table hover>\n                  <thead>\n                    <tr>\n                      <th>Value</th>\n                      <th>Type Name</th>\n                      <th>Confidence Score</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {entities.map((entity, idx) => {\n                      return (\n                      <tr key={idx}>\n                        <td>{entity.entity_value}</td>\n                        <td>{entity.entity_type}</td>\n                        <td>{parseFloat(entity.confidence_score).toFixed(3)}</td>\n                      </tr>)\n                    })}\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <Row>\n              <Col sm=\"12\">\n                <Table hover>\n                  <thead>\n                    <tr>\n                      <th>Type</th>\n                      <th>Confidence Score</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr key=\"0\">\n                      <td>{this.props.intent.intent_type}</td>\n                      <td>{parseFloat(this.props.intent.confidence_score).toFixed(3)}</td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n        \n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.startUtt = \"please show me flights from pittsburgh to new york city on wednesday morning serving breakfast\";\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.handleUtteranceChange = this.handleUtteranceChange.bind(this);\n    this.handleSubmitFrom = this.handleSubmitFrom.bind(this);\n\n    this.state = {\n      collapsed: true,\n      nluResponse: {\n        \"entities\": [\n          {\n            \"confidence_score\": 0.0,\n            \"end\": null,\n            \"entity_type\": \"t1\",\n            \"entity_value\": \"slot1\",\n            \"start\": null\n          }\n        ],\n        \"intent\": {\n            \"confidence_score\": 0.0,\n            \"intent_type\": \"t1\"\n        },\n        text: \"\"\n      }\n    };\n  }\n\n  handleUtteranceChange(elem) {\n    let utt = elem.target.value;\n    // check if enter was hitted\n    if (utt.charAt(utt.length-1) === '\\n')\n      this.handleSubmitFrom(elem);\n    else\n      this.setState({utterance: elem.target.value});\n  }\n\n  handleSubmitFrom(elem) {\n    elem.preventDefault();\n    const urlStr = 'https://cionlu.herokuapp.com/api/v1/nlu';\n    // const urlStr = 'http://localhost:5000/api/v1/nlu';\n\n    let url = new URL(urlStr);\n    let params = {utterance: this.state.utterance};\n    url.search = new URLSearchParams(params);\n\n    fetch(url, {\n      method: 'GET',\n      mode: 'cors'\n    })\n    .then(res => {\n      if (res.status !== 200)\n        return undefined\n      return res.json();\n    })\n    .then(response => {\n      if (response)\n        this.setState({nluResponse: response})\n    })\n    .catch(error => console.error('Error:', error));\n  }\n\n  toggleNavbar() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  componentDidMount() {\n    \n    this.setState({utterance: this.startUtt});\n\n    // const urlStr = 'https://cionlu.herokuapp.com/api/v1/nlu';\n    const urlStr = 'http://localhost:5000/api/v1/nlu';\n    let url = new URL(urlStr);\n    let params = {utterance: this.startUtt};\n    url.search = new URLSearchParams(params);\n\n    fetch(url, {\n      method: 'GET'\n    })\n    .then(res => {\n      if (res.status !== 200)\n        return undefined\n      return res.json();\n    })\n    .then(response => {\n      if (response)\n        this.setState({nluResponse: response})\n    })\n    .catch(error => console.error('Error:', error));\n  }\n\n  render() {\n\n    return (\n      <div>\n      <Navbar color=\"faded\" light expand=\"md\">\n        <NavbarBrand href=\"/\" className=\"mr-auto brand-title\">CIO Dialog System</NavbarBrand>\n        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n        <Collapse isOpen={!this.state.collapsed} navbar>\n          <Nav navbar right=\"true\" className=\"ml-auto\">\n            <NavItem>\n              <NavLink>NLU</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n      \n      {/* main container */}\n      <Container className=\"nlu-content\">\n        <Row>\n          <Col>\n            <h5>State something</h5>\n            <Form onSubmit={this.handleSubmitFrom}>\n              <FormGroup>\n                <Input type=\"textarea\" name=\"utterance\" id=\"utterance\"\n                  value={this.state.utterance}\n                  onChange={this.handleUtteranceChange} \n                  placeholder={this.startUtt} \n                  />\n                <Button className=\"float-right submit-btn\" color=\"primary\" type=\"submit\">Analyze</Button>\n              </FormGroup>\n            </Form>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h5>See Language Understanding in action</h5>\n            <NLUResponse\n              intent={this.state.nluResponse.intent}\n              entities={this.state.nluResponse.entities}\n            />\n          </Col>\n        </Row>\n      </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}