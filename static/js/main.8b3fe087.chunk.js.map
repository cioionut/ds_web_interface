{"version":3,"sources":["components/dialog/dialog.js","components/app/app.js","serviceWorker.js","index.js"],"names":["Message","props","isMe","react_default","a","createElement","className","value","MessageList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","messagesEnd","scrollIntoView","behavior","bind","assertThisInitialized","_this2","messageList","messages","map","message","idx","text","key","style","float","clear","ref","el","Component","Dialog","_this3","startUtt","apiUrl","concat","handleUtteranceChange","handleSubmitFrom","state","dialog","apiResponse","utterance","sessionId","_this4","url","URL","fetch","method","credentials","mode","then","res","status","json","response","setState","session_id","catch","error","console","elem","utt","target","charAt","length","_this5","preventDefault","push","payload","input","body","JSON","stringify","headers","Content-Type","output","dialog_MessageList","onSubmit","type","id","autocomplete","onChange","placeholder","App","toggleNavbar","collapsed","react_router_dom","basename","process","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","right","NavItem","NavLink","tag","Link","to","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","app_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b3fe087.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './dialog.css';\n\n\nfunction Message(props) {\n\n  if (props.isMe === true)\n    return (\n      <div className=\"row justify-content-end\">\n        <div className=\"card message-card bg-lightblue m-1\">\n            <div className=\"card-body p-2\">\n                <span className=\"mx-2\">{props.value}</span>\n            </div>\n        </div>\n      </div>\n    );\n  return (\n    <div className=\"row\">\n      <div className=\"card message-card m-1\">\n          <div className=\"card-body p-2\">\n              <span className=\"mx-2\">{props.value}</span>\n          </div>\n      </div>\n    </div>\n  )\n}\n\nclass MessageList extends Component {\n  constructor(props) {\n    super(props);\n    this.scrollToBottom = this.scrollToBottom.bind(this);\n  }\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n  \n  componentDidMount() {\n    this.scrollToBottom();\n  }\n  \n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  render() {\n    const objMessages = this.props.messages\n    let messageList = objMessages.map((message, idx) => \n      <Message value={message.text} isMe={message.isMe} key={idx}/>\n    );\n    return (\n      <div className=\"container-fluid message-scroll\">\n        {messageList}\n        <div style={{ float:\"left\", clear: \"both\" }}\n            ref={(el) => { this.messagesEnd = el; }}>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nclass Dialog extends Component {\n  constructor(props) {\n    super(props);\n    this.startUtt = \"...\";\n    let host = 'http://0.0.0.0:5000';\n    // let host = 'https://cio-dialogsys.herokuapp.com';\n    this.apiUrl = `${host}/api/v1`;\n    this.handleUtteranceChange = this.handleUtteranceChange.bind(this);\n    this.handleSubmitFrom = this.handleSubmitFrom.bind(this);\n\n    this.state = {\n      dialog: [],\n      apiResponse: {},\n      utterance: \"\",\n      sessionId: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let url = new URL(this.apiUrl + \"/sessions\");\n\n    fetch(url, {\n      method: 'POST',\n      credentials: 'include',\n      mode: 'cors'\n    })\n    .then(res => {\n      if (res.status !== 200)\n        return undefined\n      return res.json();\n    })\n    .then(response => {      \n      if (response)\n        this.setState({\n          sessionId: response.session_id,\n        });\n    })\n    .catch(error => console.error('Error:', error));\n  }\n\n  handleUtteranceChange(elem) {\n    let utt = elem.target.value;\n    // check if enter was hitted\n    if (utt.charAt(utt.length-1) === '\\n')\n      this.handleSubmitFrom(elem);\n    else\n      this.setState({utterance: elem.target.value});\n  }\n\n  handleSubmitFrom(elem) {\n    elem.preventDefault();\n    this.setState({utterance: \"\"})\n\n    let url = new URL(`${this.apiUrl}/${this.state.sessionId}/message`);\n    let dialog = this.state.dialog;\n    dialog.push({\n      isMe: true,\n      text: this.state.utterance\n    });\n    let payload = {\n      \"input\": {\n        \"text\": this.state.utterance\n      }\n    }\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      mode: 'cors'\n    })\n    .then(res => {\n      if (res.status !== 200)\n        return undefined\n      return res.json();\n    })\n    .then(response => {      \n      if (response)\n        dialog.push({\n          isMe: false,\n          text: response.output\n        });\n        this.setState({\n          apiResponse: response,\n          dialog: dialog,\n        });\n    })\n    .catch(error => console.error('Error:', error));\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n                <div className=\"card\">\n                    <div className=\"card-header\">\n                      <h5>My Virtual Asisstant</h5>\n                    </div>\n                    <div className=\"card-body d-flex flex-column p-1\">\n                        <MessageList messages={this.state.dialog} />\n                        <form onSubmit={this.handleSubmitFrom} className=\"mt-3 p-1\">\n                          <div className=\"input-group\">\n                            <input type=\"text\" className=\"form-control\" id=\"utterance\" autocomplete=\"off\"\n                              value={this.state.utterance}\n                              onChange={this.handleUtteranceChange} \n                              placeholder={this.startUtt}\n                            />\n                            <div className=\"input-group-prepend\">\n                              <button type=\"submit\" className=\"btn btn-primary\">Send</button>\n                            </div>\n                          </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dialog;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport './app.css';\n// import NLU from '../nlu/nlu'\nimport Dialog from '../dialog/dialog'\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n} from 'reactstrap';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.toggleNavbar = this.toggleNavbar.bind(this);\n\n    this.state = {\n      collapsed: true,\n    }\n  }\n\n  toggleNavbar() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render() {\n    // CIO Dialog System\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <Navbar color=\"faded\" light expand=\"md\">\n            <NavbarBrand href=\"/\" className=\"mr-auto brand-title\">CIO Dialog System</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse isOpen={!this.state.collapsed} navbar>\n              <Nav navbar right=\"true\" className=\"ml-auto\">\n                {/* <NavItem>\n                  <NavLink tag={Link} to=\"/\">NLU</NavLink>\n                </NavItem> */}\n                <NavItem>\n                  <NavLink tag={Link} to=\"/\">Assistant</NavLink>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n\n          {/* main container */}\n          {/* <Route path=\"/\" exact component={NLU} /> */}\n          <Route path=\"/\" component={Dialog} />\n        </div>\n      </Router>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './components/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}