{"version":3,"sources":["components/dialog/dialog.js","components/app/app.js","serviceWorker.js","index.js"],"names":["Message","props","isMe","react_default","a","createElement","className","value","MessageList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","messagesEnd","scrollIntoView","behavior","bind","assertThisInitialized","_this2","messageList","messages","map","message","idx","text","key","style","float","clear","ref","el","Component","Dialog","_this3","serverNotAvailableMsg","welcomeMsg","sessionExpiredMsg","restoreSessionWelcomeMsg","startUtt","apiUrl","concat","handleUtteranceChange","handleSubmitFrom","state","dialog","apiResponse","utterance","sessionId","_this4","url","URL","fetch","method","credentials","mode","then","res","status","json","response","setState","new_dialog","toConsumableArray","push","session_id","catch","error","console","elem","utt","target","charAt","length","_this5","preventDefault","payload","input","body","JSON","stringify","headers","Content-Type","output","dialog_MessageList","onSubmit","type","id","autoComplete","onChange","placeholder","App","toggleNavbar","collapsed","react_router_dom","basename","process","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","right","NavItem","NavLink","tag","Link","to","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","app_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a50a8ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './dialog.css';\n\n\nfunction Message(props) {\n\n  if (props.isMe === true)\n    return (\n      <div className=\"row justify-content-end\">\n        <div className=\"card message-card bg-lightblue m-1\">\n            <div className=\"card-body p-2\">\n                <span className=\"mx-2\">{props.value}</span>\n            </div>\n        </div>\n      </div>\n    );\n  return (\n    <div className=\"row\">\n      <div className=\"card message-card m-1\">\n          <div className=\"card-body p-2\">\n              <span className=\"mx-2\">{props.value}</span>\n          </div>\n      </div>\n    </div>\n  )\n}\n\nclass MessageList extends Component {\n  constructor(props) {\n    super(props);\n    this.scrollToBottom = this.scrollToBottom.bind(this);\n  }\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n  \n  componentDidMount() {\n    this.scrollToBottom();\n  }\n  \n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  render() {\n    const objMessages = this.props.messages\n    let messageList = objMessages.map((message, idx) => \n      <Message value={message.text} isMe={message.isMe} key={idx}/>\n    );\n    return (\n      <div className=\"container-fluid message-scroll\">\n        {messageList}\n        <div style={{ float:\"left\", clear: \"both\" }}\n            ref={(el) => { this.messagesEnd = el; }}>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nclass Dialog extends Component {\n  constructor(props) {\n    super(props);\n    this.serverNotAvailableMsg = \"Incerc sa stabilesc conexiunea cu serverul de dialog, incearca te rog peste cateva momente\";\n    this.welcomeMsg = \"Buna! Eu sunt EnelBot, asistentul tau virtual. Te pot ajuta cu trimiterea facturii curente sau cu actualizarea indexului. Scrie-mi daca ai nevoie de mine!\"\n    this.sessionExpiredMsg = \"Din cauza inactivitatii sesiunea de dialog s-a incheiat, voi deschide o noua conversatie.\"\n    this.restoreSessionWelcomeMsg = \"Bine ai revenit! Te pot ajuta cu trimiterea facturii curente sau cu actualizarea indexului. Scrie-mi daca mai ai nevoie de mine!\"\n\n    this.startUtt = \"...\";\n    // let host = 'http://0.0.0.0:5000';\n    let host = 'https://cio-dialogsys.herokuapp.com';\n    this.apiUrl = `${host}/api/v1`;\n    this.handleUtteranceChange = this.handleUtteranceChange.bind(this);\n    this.handleSubmitFrom = this.handleSubmitFrom.bind(this);\n\n    this.state = {\n      dialog: [],\n      apiResponse: {},\n      utterance: \"\",\n      sessionId: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let url = new URL(this.apiUrl + \"/sessions\");\n\n    fetch(url, {\n      method: 'POST',\n      credentials: 'include',\n      mode: 'cors'\n    })\n    .then(res => {\n      if (res.status !== 200)\n        return undefined\n      return res.json();\n    })\n    .then(response => {   \n      if (response) {\n        this.setState(state => {\n          let new_dialog = [...state.dialog]\n          new_dialog.push({\n            isMe: false,\n            text: this.welcomeMsg\n          })\n          return {\n            sessionId: response.session_id,\n            dialog: new_dialog\n          }\n        });\n      }\n    })\n    .catch(error => {\n      this.setState(state => {\n        let new_dialog = [...state.dialog]\n        new_dialog.push({\n          isMe: false,\n          text: this.serverNotAvailableMsg\n        })\n        return {\n          dialog: new_dialog\n        }\n      });\n      console.error('Error:', error)\n    });\n  }\n\n  handleUtteranceChange(elem) {\n    let utt = elem.target.value;\n    // check if enter was hitted\n    if (utt.charAt(utt.length-1) === '\\n')\n      this.handleSubmitFrom(elem);\n    else\n      this.setState({utterance: elem.target.value});\n  }\n\n  handleSubmitFrom(elem) {\n    elem.preventDefault();\n    this.setState({utterance: \"\"})\n\n    let url = new URL(`${this.apiUrl}/${this.state.sessionId}/message`);\n    // add user utterance to dialog list\n    this.setState(state => {\n      let new_dialog = [...state.dialog] \n      new_dialog.push({\n        isMe: true,\n        text: this.state.utterance\n      });\n      return { dialog: new_dialog }\n    });\n\n    let payload = {\n      \"input\": {\n        \"text\": this.state.utterance\n      }\n    }\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      mode: 'cors'\n    })\n    .then(res => {\n      if (res.status !== 200) {\n        if (res.status === 404) {\n          // session has expired\n          this.setState(state => {\n            let new_dialog = [...state.dialog]\n            new_dialog.push({\n              isMe: false,\n              text: this.sessionExpiredMsg\n            });\n            return { dialog: new_dialog }\n          });\n          // create a new session\n          let url = new URL(this.apiUrl + \"/sessions\");\n          fetch(url, {\n            method: 'POST',\n            credentials: 'include',\n            mode: 'cors'\n          })\n          .then(res => {\n            if (res.status !== 200)\n              return undefined\n            return res.json();\n          })\n          .then(response => {      \n            if (response) {\n              this.setState(state => {\n                let new_dialog = [...state.dialog]\n                new_dialog.push({\n                  isMe: false,\n                  text: this.restoreSessionWelcomeMsg\n                });\n                return {\n                  sessionId: response.session_id,\n                  dialog: new_dialog\n                }\n              });\n            }\n          })\n          .catch(error => {\n            this.setState(state => {\n              let new_dialog = [...state.dialog]\n              new_dialog.push({\n                isMe: false,\n                text: this.serverNotAvailableMsg\n              });\n              return {dialog: new_dialog}\n            });\n            console.error('Error:', error)\n          });          \n        }\n        return undefined\n      }\n      return res.json();\n    })\n    .then(response => {      \n      if (response)  {\n        this.setState(state => {\n          let new_dialog = [...state.dialog]\n          new_dialog.push({\n            isMe: false,\n            text: response.output\n          });\n          return {\n            apiResponse: response,            \n            dialog: new_dialog\n          }\n        });        \n      }\n    })\n    .catch(error => {\n      this.setState(state => {\n        let new_dialog = [...state.dialog]\n        new_dialog.push({\n          isMe: false,\n          text: this.serverNotAvailableMsg\n        })\n        return {\n          dialog: new_dialog\n        }\n      });\n      console.error('Error:', error)\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n                <div className=\"card\">\n                    <div className=\"card-header\">\n                      <h5>My Virtual Asisstant</h5>\n                    </div>\n                    <div className=\"card-body d-flex flex-column p-1\">\n                        <MessageList messages={this.state.dialog} />\n                        <form onSubmit={this.handleSubmitFrom} className=\"mt-3 p-1\">\n                          <div className=\"input-group\">\n                            <input type=\"text\" className=\"form-control\" id=\"utterance\" autoComplete=\"off\"\n                              value={this.state.utterance}\n                              onChange={this.handleUtteranceChange} \n                              placeholder={this.startUtt}\n                            />\n                            <div className=\"input-group-prepend\">\n                              <button type=\"submit\" className=\"btn btn-primary\">Send</button>\n                            </div>\n                          </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dialog;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport './app.css';\n// import NLU from '../nlu/nlu'\nimport Dialog from '../dialog/dialog'\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n} from 'reactstrap';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.toggleNavbar = this.toggleNavbar.bind(this);\n\n    this.state = {\n      collapsed: true,\n    }\n  }\n\n  toggleNavbar() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render() {\n    // CIO Dialog System\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <Navbar color=\"faded\" light expand=\"md\">\n            <NavbarBrand href=\"/\" className=\"mr-auto brand-title\">CIO Dialog System</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse isOpen={!this.state.collapsed} navbar>\n              <Nav navbar right=\"true\" className=\"ml-auto\">\n                {/* <NavItem>\n                  <NavLink tag={Link} to=\"/\">NLU</NavLink>\n                </NavItem> */}\n                <NavItem>\n                  <NavLink tag={Link} to=\"/\">Assistant</NavLink>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n\n          {/* main container */}\n          {/* <Route path=\"/\" exact component={NLU} /> */}\n          <Route path=\"/\" component={Dialog} />\n        </div>\n      </Router>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './components/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}